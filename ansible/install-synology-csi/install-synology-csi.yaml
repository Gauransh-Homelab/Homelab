---
- name: Install and configure Synology CSI on Kubernetes
  hosts: localhost
  gather_facts: no

  # Include the encrypted variables file
  vars_files:
    - vault-vars.yml
  
  # Define non-sensitive variables directly in the playbook
  vars:
    synology_csi_repo: "https://github.com/zebernst/synology-csi-talos.git"
    synology_csi_dir: "/tmp/synology-csi-talos"
    dsm_port: 5000
    dsm_https: false
    k8s_namespace: "synology-csi"
    client_info_file: "{{ synology_csi_dir }}/config/client-info.yml"
    k8s_context: ""              # Optionally set your kubeconfig context

  tasks:
    - name: Ensure git is installed
      ansible.builtin.package:
        name: git
        state: present

    - name: Clone Synology CSI repository
      ansible.builtin.git:
        repo: "{{ synology_csi_repo }}"
        dest: "{{ synology_csi_dir }}"
        force: yes

    - name: Copy client-info-template.yml to client-info.yml
      ansible.builtin.copy:
        src: "{{ synology_csi_dir }}/config/client-info-template.yml"
        dest: "{{ client_info_file }}"
        remote_src: yes

    - name: Update client-info.yml with DSM credentials
      ansible.builtin.lineinfile:
        path: "{{ client_info_file }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: '^ *host:', line: "  host: {{ dsm_host }}" }
        - { regexp: '^ *port:', line: "  port: {{ dsm_port }}" }
        - { regexp: '^ *https:', line: "  https: {{ dsm_https | lower }}" }
        - { regexp: '^ *username:', line: "  username: {{ dsm_username }}" }
        - { regexp: '^ *password:', line: "  password: {{ dsm_password }}" }

    - name: Create Synology CSI namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ k8s_namespace }}"
        state: present
        context: "{{ k8s_context | default(omit) }}"

    - name: Create Synology client-info secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: client-info-secret
            namespace: "{{ k8s_namespace }}"
          type: Opaque
          data:
            client-info.yml: "{{ lookup('file', client_info_file) | b64encode }}"
        context: "{{ k8s_context | default(omit) }}"

    - name: Apply Synology CSI manifests (namespace, controller, driver, node, storage class, snapshotter)
      kubernetes.core.k8s:
        state: present
        src: "{{ item }}"
        context: "{{ k8s_context | default(omit) }}"
      loop:
        - "{{ synology_csi_dir }}/deploy/kubernetes/v1.20/namespace.yml"
        - "{{ synology_csi_dir }}/deploy/kubernetes/v1.20/controller.yml"
        - "{{ synology_csi_dir }}/deploy/kubernetes/v1.20/csi-driver.yml"
        - "{{ synology_csi_dir }}/deploy/kubernetes/v1.20/node.yml"
        - "{{ synology_csi_dir }}/deploy/kubernetes/v1.20/storage-class.yml"
        - "{{ synology_csi_dir }}/deploy/kubernetes/v1.20/snapshotter/snapshotter.yaml"
        - "{{ synology_csi_dir }}/deploy/kubernetes/v1.20/snapshotter/volume-snapshot-class.yml"

    # Optionally, you can add a task to verify the pods are running
    - name: Wait for Synology CSI pods to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ k8s_namespace }}"
        context: "{{ k8s_context | default(omit) }}"
      register: csi_pods

    - name: Debug CSI pod status
      ansible.builtin.debug:
        var: csi_pods.resources


