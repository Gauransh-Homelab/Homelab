apiVersion: v1
kind: ConfigMap
metadata:
  name: discord-webhook-bridge
  namespace: monitoring
data:
  server.js: |
    const express = require('express');
    const axios = require('axios');
    const app = express();
    
    app.use(express.json());
    
    const WEBHOOKS = {
      critical: process.env.DISCORD_CRITICAL_WEBHOOK,
      warning: process.env.DISCORD_WARNING_WEBHOOK,
      status: process.env.DISCORD_STATUS_WEBHOOK
    };
    
    app.post('/webhook/:severity', async (req, res) => {
      const severity = req.params.severity;
      const webhook = WEBHOOKS[severity];
      
      if (!webhook) {
        return res.status(404).json({ error: 'Unknown severity' });
      }
      
      try {
        const alertData = req.body;
        let discordPayload = {};
        
        if (severity === 'critical') {
          // Critical alerts need ping outside embed
          discordPayload.content = '<@474581341581606912> **CRITICAL ALERT!**';
        }
        
        // Build embeds from alerts
        discordPayload.embeds = alertData.alerts.slice(0, 10).map(alert => {
          const embed = {
            color: severity === 'critical' ? 15158332 : 16776960,
            title: `${severity === 'critical' ? '🚨' : '⚠️'} ${alert.labels.alertname}`,
            fields: []
          };
          
          if (alert.labels.namespace) {
            embed.fields.push({ name: 'Namespace', value: alert.labels.namespace, inline: true });
          }
          if (alert.labels.pod) {
            embed.fields.push({ name: 'Pod', value: alert.labels.pod, inline: true });
          }
          if (alert.annotations.summary) {
            embed.fields.push({ name: 'Summary', value: alert.annotations.summary, inline: false });
          }
          if (alert.annotations.description) {
            embed.fields.push({ name: 'Details', value: alert.annotations.description.substring(0, 1024), inline: false });
          }
          
          embed.timestamp = new Date(alert.startsAt).toISOString();
          
          return embed;
        });
        
        await axios.post(webhook, discordPayload);
        res.json({ success: true });
      } catch (error) {
        console.error('Error sending to Discord:', error);
        res.status(500).json({ error: error.message });
      }
    });
    
    app.listen(8080, () => {
      console.log('Discord webhook bridge listening on port 8080');
    });
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: discord-webhook-bridge
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: discord-webhook-bridge
  template:
    metadata:
      labels:
        app: discord-webhook-bridge
    spec:
      containers:
      - name: bridge
        image: node:20-alpine
        command: 
        - sh
        - -c
        - |
          cd /app
          npm install express axios
          node server.js
        env:
        - name: DISCORD_CRITICAL_WEBHOOK
          value: "https://discord.com/api/webhooks/1392851349871263794/OnlF2OAVJ9HTfr35M-vb-I4BFevFRWJLaNRCJAPGk3Mt8y3ZUIh3ggKvZ1OJkZqeAwuw"
        - name: DISCORD_WARNING_WEBHOOK
          value: "https://discord.com/api/webhooks/1392851349871263794/OnlF2OAVJ9HTfr35M-vb-I4BFevFRWJLaNRCJAPGk3Mt8y3ZUIh3ggKvZ1OJkZqeAwuw"
        - name: DISCORD_STATUS_WEBHOOK
          value: "https://discord.com/api/webhooks/1392852477656956978/67Pi89pq7wN-Os0HmDF6iBgthJ1uGO9sD3zuKC9EuqVmfpNBkRlo86aUeLoMJk2lFP-d"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: app
          mountPath: /app
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      volumes:
      - name: app
        configMap:
          name: discord-webhook-bridge
---
apiVersion: v1
kind: Service
metadata:
  name: discord-webhook-bridge
  namespace: monitoring
spec:
  selector:
    app: discord-webhook-bridge
  ports:
  - port: 8080
    targetPort: 8080