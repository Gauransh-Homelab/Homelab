# Loki values for Talos Linux homelab
# Optimized for 7-day retention with self-monitoring enabled

# Deployment mode
deploymentMode: SingleBinary

# Single binary mode for simplicity
loki:
  # No authentication needed for homelab
  auth_enabled: false
  
  # Server configuration
  server:
    grpc_server_max_recv_msg_size: 8388608  # 8MB
    grpc_server_max_send_msg_size: 8388608  # 8MB
    http_server_read_timeout: 600s
    http_server_write_timeout: 600s
    http_listen_port: 3100
    grpc_listen_port: 9095
  
  # Common storage config
  commonConfig:
    path_prefix: /var/loki
    replication_factor: 1
    storage:
      filesystem:
        chunks_directory: /var/loki/chunks
        rules_directory: /var/loki/rules
  
  # Schema configuration
  schemaConfig:
    configs:
      - from: 2024-01-01
        store: tsdb
        object_store: filesystem
        schema: v13
        index:
          prefix: index_
          period: 24h
  
  # Storage configuration
  storage:
    type: filesystem
    filesystem:
      directory: /var/loki/chunks
    # Added tsdb_shipper config to use the persistent volume
    tsdb_shipper:
      active_index_directory: /var/loki/tsdb-index
      cache_location: /var/loki/tsdb-cache
  
  # Limits configuration
  limits_config:
    retention_period: 168h  # 7 days
    reject_old_samples: true
    reject_old_samples_max_age: 168h
    max_cache_freshness_per_query: 10m
    split_queries_by_interval: 24h
    ingestion_rate_mb: 10
    ingestion_burst_size_mb: 20
    max_streams_per_user: 10000
    max_global_streams_per_user: 10000
    max_chunks_per_query: 2000000
    max_query_parallelism: 32
  
  # Compactor for retention
  compactor:
    retention_enabled: true
    compaction_interval: 10m
    retention_delete_delay: 2h
    retention_delete_worker_count: 150
    working_directory: /var/loki/compactor
    delete_request_store: filesystem
  
  # Ruler configuration (for future alerting rules)
  ruler:
    enable_api: true
    storage:
      type: local
      local:
        directory: /var/loki/rules
    ring:
      kvstore:
        store: inmemory
    rule_path: /var/loki/rules-temp

# Single binary deployment
singleBinary:
  replicas: 1
  
  # Persistence configuration
  persistence:
    enabled: true
    existingClaim: loki
    enableStatefulSetAutoDeletePVC: false
  
  # Resource allocation
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 2Gi
  
  # Node selector if needed
  nodeSelector: {}
  
  # Tolerations if needed
  tolerations: []
  
  # Pod annotations
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3100"
    prometheus.io/path: "/metrics"

# Service configuration
service:
  type: ClusterIP
  port: 3100

# Service monitor for Prometheus scraping
serviceMonitor:
  enabled: true
  interval: 30s
  labels:
    prometheus: kube-prometheus
  scrapeTimeout: 10s

# Self-monitoring configuration
monitoring:
  dashboards:
    enabled: true
    namespace: monitoring
    labels:
      grafana_dashboard: "1"
  rules:
    enabled: true
    namespace: monitoring
    labels:
      prometheus: kube-prometheus
  serviceMonitor:
    enabled: true
    namespace: monitoring
    labels:
      prometheus: kube-prometheus
    interval: 30s
    metricsInstance:
      enabled: true
  selfMonitoring:
    enabled: false  # Disable to avoid GrafanaAgent CRD requirements
    grafanaAgent:
      installOperator: false
      enabled: false
    lokiCanary:
      enabled: false  # Not needed for homelab

# Disable components we don't need
test:
  enabled: false

gateway:
  enabled: false

# Disable distributed mode components (using single binary)
write:
  enabled: false
  replicas: 0

read:
  enabled: false
  replicas: 0

backend:
  enabled: false
  replicas: 0

ruler:
  enabled: false
  replicas: 0

indexGateway:
  enabled: false
  replicas: 0

bloomCompactor:
  enabled: false
  replicas: 0

bloomGateway:
  enabled: false
  replicas: 0

chunksCache:
  enabled: false
  replicas: 0

resultsCache:
  enabled: false
  replicas: 0

# Grafana data source configuration
# This will be handled by kube-prometheus-stack's Grafana config