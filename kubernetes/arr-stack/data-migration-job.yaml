apiVersion: batch/v1
kind: Job
metadata:
  name: arr-stack-data-migration
  namespace: arr-stack
spec:
  template:
    metadata:
      name: arr-stack-data-migration
    spec:
      restartPolicy: OnFailure
      initContainers:
      # Create hostPath volume to access migration data
      - name: setup-migration-data
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Setting up migration data access..."
            # This assumes your migration data is available at a specific path
            # You'll need to mount your migration data or copy it to a location accessible by Kubernetes
        volumeMounts:
        - name: migration-data
          mountPath: /migration-source
      containers:
      # Migrate Gluetun data
      - name: migrate-gluetun
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Migrating Gluetun data..."
            if [ -d "/migration-source/gluetun" ] && [ ! -f "/target/.gluetun-migrated" ]; then
              cp -r /migration-source/gluetun/* /target/ 2>/dev/null || true
              chown -R 1000:1000 /target/
              touch /target/.gluetun-migrated
              echo "Gluetun migration completed"
            else
              echo "Gluetun data already migrated or source not found"
            fi
        volumeMounts:
        - name: migration-data
          mountPath: /migration-source
        - name: gluetun-config
          mountPath: /target
      # Migrate qBittorrent data
      - name: migrate-qbittorrent
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Migrating qBittorrent data..."
            if [ -d "/migration-source/qbittorrent" ] && [ ! -f "/target/.qbittorrent-migrated" ]; then
              cp -r /migration-source/qbittorrent/* /target/ 2>/dev/null || true
              chown -R 1000:1000 /target/
              touch /target/.qbittorrent-migrated
              echo "qBittorrent migration completed"
            else
              echo "qBittorrent data already migrated or source not found"
            fi
        volumeMounts:
        - name: migration-data
          mountPath: /migration-source
        - name: qbittorrent-config
          mountPath: /target
      # Migrate NZBGet data
      - name: migrate-nzbget
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Migrating NZBGet data..."
            if [ -d "/migration-source/nzbget" ] && [ ! -f "/target/.nzbget-migrated" ]; then
              cp -r /migration-source/nzbget/* /target/ 2>/dev/null || true
              chown -R 1000:1000 /target/
              touch /target/.nzbget-migrated
              echo "NZBGet migration completed"
            else
              echo "NZBGet data already migrated or source not found"
            fi
        volumeMounts:
        - name: migration-data
          mountPath: /migration-source
        - name: nzbget-config
          mountPath: /target
      # Migrate Prowlarr data
      - name: migrate-prowlarr
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Migrating Prowlarr data..."
            if [ -d "/migration-source/prowlarr" ] && [ ! -f "/target/.prowlarr-migrated" ]; then
              cp -r /migration-source/prowlarr/* /target/ 2>/dev/null || true
              chown -R 1000:1000 /target/
              touch /target/.prowlarr-migrated
              echo "Prowlarr migration completed"
            else
              echo "Prowlarr data already migrated or source not found"
            fi
        volumeMounts:
        - name: migration-data
          mountPath: /migration-source
        - name: prowlarr-config
          mountPath: /target
      # Migrate Sonarr data
      - name: migrate-sonarr
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Migrating Sonarr data..."
            if [ -d "/migration-source/sonarr" ] && [ ! -f "/target/.sonarr-migrated" ]; then
              cp -r /migration-source/sonarr/* /target/ 2>/dev/null || true
              chown -R 1000:1000 /target/
              touch /target/.sonarr-migrated
              echo "Sonarr migration completed"
            else
              echo "Sonarr data already migrated or source not found"
            fi
        volumeMounts:
        - name: migration-data
          mountPath: /migration-source
        - name: sonarr-config
          mountPath: /target
      # Migrate Sonarr2 data
      - name: migrate-sonarr2
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Migrating Sonarr2 data..."
            if [ -d "/migration-source/sonarr2" ] && [ ! -f "/target/.sonarr2-migrated" ]; then
              cp -r /migration-source/sonarr2/* /target/ 2>/dev/null || true
              chown -R 1000:1000 /target/
              touch /target/.sonarr2-migrated
              echo "Sonarr2 migration completed"
            else
              echo "Sonarr2 data already migrated or source not found"
            fi
        volumeMounts:
        - name: migration-data
          mountPath: /migration-source
        - name: sonarr2-config
          mountPath: /target
      # Migrate Radarr data
      - name: migrate-radarr
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Migrating Radarr data..."
            if [ -d "/migration-source/radarr" ] && [ ! -f "/target/.radarr-migrated" ]; then
              cp -r /migration-source/radarr/* /target/ 2>/dev/null || true
              chown -R 1000:1000 /target/
              touch /target/.radarr-migrated
              echo "Radarr migration completed"
            else
              echo "Radarr data already migrated or source not found"
            fi
        volumeMounts:
        - name: migration-data
          mountPath: /migration-source
        - name: radarr-config
          mountPath: /target
      # Migrate Radarr2 data
      - name: migrate-radarr2
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Migrating Radarr2 data..."
            if [ -d "/migration-source/radarr2" ] && [ ! -f "/target/.radarr2-migrated" ]; then
              cp -r /migration-source/radarr2/* /target/ 2>/dev/null || true
              chown -R 1000:1000 /target/
              touch /target/.radarr2-migrated
              echo "Radarr2 migration completed"
            else
              echo "Radarr2 data already migrated or source not found"
            fi
        volumeMounts:
        - name: migration-data
          mountPath: /migration-source
        - name: radarr2-config
          mountPath: /target
      # Migrate Bazarr data
      - name: migrate-bazarr
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Migrating Bazarr data..."
            if [ -d "/migration-source/bazarr" ] && [ ! -f "/target/.bazarr-migrated" ]; then
              cp -r /migration-source/bazarr/* /target/ 2>/dev/null || true
              chown -R 1000:1000 /target/
              touch /target/.bazarr-migrated
              echo "Bazarr migration completed"
            else
              echo "Bazarr data already migrated or source not found"
            fi
        volumeMounts:
        - name: migration-data
          mountPath: /migration-source
        - name: bazarr-config
          mountPath: /target
      # Migrate Bazarr2 data
      - name: migrate-bazarr2
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Migrating Bazarr2 data..."
            if [ -d "/migration-source/bazarr2" ] && [ ! -f "/target/.bazarr2-migrated" ]; then
              cp -r /migration-source/bazarr2/* /target/ 2>/dev/null || true
              chown -R 1000:1000 /target/
              touch /target/.bazarr2-migrated
              echo "Bazarr2 migration completed"
            else
              echo "Bazarr2 data already migrated or source not found"
            fi
        volumeMounts:
        - name: migration-data
          mountPath: /migration-source
        - name: bazarr2-config
          mountPath: /target
      # Migrate Notifiarr data
      - name: migrate-notifiarr
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Migrating Notifiarr data..."
            if [ -d "/migration-source/notifiarr" ] && [ ! -f "/target/.notifiarr-migrated" ]; then
              cp -r /migration-source/notifiarr/* /target/ 2>/dev/null || true
              chown -R 1000:1000 /target/
              touch /target/.notifiarr-migrated
              echo "Notifiarr migration completed"
            else
              echo "Notifiarr data already migrated or source not found"
            fi
        volumeMounts:
        - name: migration-data
          mountPath: /migration-source
        - name: notifiarr-config
          mountPath: /target
      volumes:
      # You'll need to modify this to point to your actual migration data location
      # Option 1: hostPath (if migration data is on the node)
      - name: migration-data
        hostPath:
          path: /path/to/your/migration/arr-stack  # Update this path
          type: Directory
      # Option 2: NFS (if migration data is on NFS)
      # - name: migration-data
      #   nfs:
      #     server: your-nfs-server
      #     path: /path/to/migration/arr-stack
      # PVC mounts for all services
      - name: gluetun-config
        persistentVolumeClaim:
          claimName: gluetun-config
      - name: qbittorrent-config
        persistentVolumeClaim:
          claimName: qbittorrent-config
      - name: nzbget-config
        persistentVolumeClaim:
          claimName: nzbget-config
      - name: prowlarr-config
        persistentVolumeClaim:
          claimName: prowlarr-config
      - name: sonarr-config
        persistentVolumeClaim:
          claimName: sonarr-config
      - name: sonarr2-config
        persistentVolumeClaim:
          claimName: sonarr2-config
      - name: radarr-config
        persistentVolumeClaim:
          claimName: radarr-config
      - name: radarr2-config
        persistentVolumeClaim:
          claimName: radarr2-config
      - name: bazarr-config
        persistentVolumeClaim:
          claimName: bazarr-config
      - name: bazarr2-config
        persistentVolumeClaim:
          claimName: bazarr2-config
      - name: notifiarr-config
        persistentVolumeClaim:
          claimName: notifiarr-config