apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyfin
  namespace: jelly # Adjust if using a different namespace
  labels:
    app: jellyfin
spec:
  replicas: 1
  strategy:
    type: Recreate # Ensures old pod stops before new one starts, good for stateful apps
  selector:
    matchLabels:
      app: jellyfin
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      # If you strictly need `network_mode: host` for features like DLNA discovery,
      # you can uncomment the following line. Be aware of the implications:
      # it bypasses some Kubernetes networking abstractions and directly uses the node's network.
      # hostNetwork: true
      securityContext:
        runAsUser: <your_uid>      # Replace with your desired User ID
        runAsGroup: <your_gid>     # Replace with your desired Group ID
        fsGroup: <your_gid>        # Often same as runAsGroup, ensures group permissions on volumes
      containers:
        - name: jellyfin
          image: jellyfin/jellyfin:latest # Or a specific version
          imagePullPolicy: IfNotPresent
          env:
            - name: JELLYFIN_CACHE_DIR
              value: "/var/cache/jellyfin"
            - name: JELLYFIN_CONFIG_DIR
              value: "/etc/jellyfin"
            - name: JELLYFIN_DATA_DIR
              value: "/var/lib/jellyfin"
            - name: JELLYFIN_LOG_DIR
              value: "/var/log/jellyfin"
            # Add any other environment variables you need, e.g., TZ for timezone
            # - name: TZ
            #   value: "Your/Timezone"
          ports:
            - name: http
              containerPort: 8096 # Default Jellyfin HTTP port
              protocol: TCP
            # If using hostNetwork: true, you might not need to define containerPort
            # for DLNA (1900/udp, 7359/udp) here, as it will use host ports directly.
            # If not using hostNetwork, DLNA may require additional setup (e.g. hostPort or specific CNI).
          volumeMounts:
            - name: config-volume
              mountPath: /etc/jellyfin        # Matches JELLYFIN_CONFIG_DIR
            - name: cache-volume
              mountPath: /var/cache/jellyfin  # Matches JELLYFIN_CACHE_DIR
            - name: data-volume
              mountPath: /var/lib/jellyfin    # Matches JELLYFIN_DATA_DIR
            - name: log-volume
              mountPath: /var/log/jellyfin    # Matches JELLYFIN_LOG_DIR
            - name: media-volume
              mountPath: /media/movies        # Example: replace with your desired container path for movies
            # Add more media volumeMounts as needed, e.g.:
            # - name: media-tv-volume
            #   mountPath: /media/tv
          # Liveness and Readiness probes are recommended for production
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: http
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     port: http
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
      volumes:
        - name: config-volume
          persistentVolumeClaim:
            claimName: <your-pvc-name-for-config> # Replace with your existing PVC name for config
        - name: cache-volume
          persistentVolumeClaim:
            claimName: <your-pvc-name-for-cache>  # Replace with your existing PVC name for cache
        - name: data-volume
          persistentVolumeClaim:
            claimName: <your-pvc-name-for-data>   # Replace with your existing PVC name for data
        - name: log-volume
          persistentVolumeClaim:
            claimName: <your-pvc-name-for-logs>   # Replace with your existing PVC name for logs
        - name: media-volume
          persistentVolumeClaim:
            claimName: <your-pvc-name-for-media>  # Replace with your existing PVC name for your media library
        # Add more media volumes as needed, matching the volumeMounts
        # - name: media-tv-volume
        #   persistentVolumeClaim:
        #     claimName: <your-pvc-name-for-tv>

